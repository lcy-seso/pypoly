start: 343
end: 878
indent: '  '
context: '[depth, max_seq_len, batch_size] -> {  : 0 <= depth <= 2147483647 and 0
  <= max_seq_len <= 2147483647 and -2147483648 <= batch_size <= 2147483647 }'
schedule: '{ domain: "[depth, max_seq_len, batch_size] -> { S_0[i] : 0 <= i < batch_size;
  S_4[i, j, k] : 0 <= i < batch_size and j >= 0 and 0 <= k < depth; S_6[i, j, k] :
  0 <= i < batch_size and j > 0 and 0 <= k < depth; S_11[i, j, k] : 0 <= i < batch_size
  and j >= 0 and 0 <= k < depth; S_9[i, j, k = 0] : depth > 0 and 0 <= i < batch_size
  and j >= 0; S_8[i, j, k] : 0 <= i < batch_size and j >= 0 and 0 <= k < depth; S_3[i,
  j, k] : 0 <= i < batch_size and j >= 0 and 0 <= k < depth; S_14[i, j, k] : 0 <=
  i < batch_size and j >= 0 and 0 <= k < depth; S_1[i] : 0 <= i < batch_size; S_5[i,
  j = 0, k] : 0 <= i < batch_size and 0 <= k < depth; S_10[i, j, k] : 0 <= i < batch_size
  and j >= 0 and 0 < k < depth; S_13[i, j, k] : 0 <= i < batch_size and j >= 0 and
  0 <= k < depth; S_7[i, j, k] : 0 <= i < batch_size and j >= 0 and 0 <= k < depth;
  S_2[i] : 0 <= i < batch_size; S_12[i, j, k] : 0 <= i < batch_size and j >= 0 and
  0 <= k < depth }", child: { schedule: "[batch_size, depth] -> L_0[{ S_7[i, j, k]
  -> [(i)]; S_4[i, j, k] -> [(i)]; S_1[i] -> [(i)]; S_13[i, j, k] -> [(i)]; S_6[i,
  j, k] -> [(i)]; S_2[i] -> [(i)]; S_0[i] -> [(i)]; S_9[i, j, k] -> [(i)]; S_10[i,
  j, k] -> [(i)]; S_8[i, j, k] -> [(i)]; S_3[i, j, k] -> [(i)]; S_11[i, j, k] -> [(i)];
  S_12[i, j, k] -> [(i)]; S_14[i, j, k] -> [(i)]; S_5[i, j, k] -> [(i)] }]", child:
  { sequence: [ { filter: "[batch_size, depth] -> { S_0[i] }" }, { filter: "[batch_size,
  depth] -> { S_1[i] }" }, { filter: "[batch_size, depth] -> { S_7[i, j, k]; S_4[i,
  j, k]; S_13[i, j, k]; S_6[i, j, k]; S_9[i, j, k]; S_10[i, j, k]; S_8[i, j, k]; S_3[i,
  j, k]; S_11[i, j, k]; S_12[i, j, k]; S_14[i, j, k]; S_5[i, j, k] }", child: { schedule:
  "[batch_size, depth] -> L_1[{ S_7[i, j, k] -> [(j)]; S_4[i, j, k] -> [(j)]; S_13[i,
  j, k] -> [(j)]; S_6[i, j, k] -> [(j)]; S_9[i, j, k] -> [(j)]; S_10[i, j, k] -> [(j)];
  S_8[i, j, k] -> [(j)]; S_3[i, j, k] -> [(j)]; S_11[i, j, k] -> [(j)]; S_12[i, j,
  k] -> [(j)]; S_14[i, j, k] -> [(j)]; S_5[i, j, k] -> [(j)] }]", child: { schedule:
  "[batch_size, depth] -> L_2[{ S_7[i, j, k] -> [(k)]; S_4[i, j, k] -> [(k)]; S_13[i,
  j, k] -> [(k)]; S_6[i, j, k] -> [(k)]; S_9[i, j, k] -> [(k)]; S_10[i, j, k] -> [(k)];
  S_8[i, j, k] -> [(k)]; S_3[i, j, k] -> [(k)]; S_11[i, j, k] -> [(k)]; S_12[i, j,
  k] -> [(k)]; S_14[i, j, k] -> [(k)]; S_5[i, j, k] -> [(k)] }]", child: { sequence:
  [ { filter: "[batch_size, depth] -> { S_3[i, j, k] }" }, { filter: "[batch_size,
  depth] -> { S_6[i, j, k]; S_5[i, j, k] }", child: { set: [ { filter: "[batch_size,
  depth] -> { S_5[i, j, k] }" }, { filter: "[batch_size, depth] -> { S_6[i, j, k]
  }" } ] } }, { filter: "[batch_size, depth] -> { S_7[i, j, k] }" }, { filter: "[batch_size,
  depth] -> { S_9[i, j, k]; S_10[i, j, k] }", child: { set: [ { filter: "[batch_size,
  depth] -> { S_9[i, j, k] }" }, { filter: "[batch_size, depth] -> { S_10[i, j, k]
  }" } ] } }, { filter: "[batch_size, depth] -> { S_11[i, j, k] }" }, { filter: "[batch_size,
  depth] -> { S_12[i, j, k] }" }, { filter: "[batch_size, depth] -> { S_14[i, j, k]
  }" }, { filter: "[batch_size, depth] -> { S_4[i, j, k]; S_13[i, j, k]; S_8[i, j,
  k] }", child: { set: [ { filter: "[batch_size, depth] -> { S_4[i, j, k] }" }, {
  filter: "[batch_size, depth] -> { S_8[i, j, k] }" }, { filter: "[batch_size, depth]
  -> { S_13[i, j, k] }" } ] } } ] } } } }, { filter: "[batch_size, depth] -> { S_2[i]
  }" } ] } } }'
arrays:
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { seq_len[] }'
  element_type: int
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { h_prev[] }'
  element_type: float
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { x[] }'
  element_type: float
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { h[] }'
  element_type: float
  element_size: 4
  declared: 1
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { init_state[] }'
  element_type: float
  element_size: 4
- context: '[max_seq_len] -> {  : max_seq_len >= 0 }'
  extent: '[depth, max_seq_len, batch_size] -> { input[i0, i1] : i0 >= 0 and 0 <=
    i1 < max_seq_len }'
  element_type: float
  element_size: 4
- context: '[depth, max_seq_len] -> {  : depth >= 0 and max_seq_len >= 0 }'
  extent: '[depth, max_seq_len, batch_size] -> { output[i0, i1, i2] : i0 >= 0 and
    0 <= i1 < max_seq_len and 0 <= i2 < depth }'
  element_type: float
  element_size: 4
- context: '{  :  }'
  extent: '[depth, max_seq_len, batch_size] -> { seq_lens[i0] : i0 >= 0 }'
  element_type: const int
  element_size: 4
statements:
- line: 12
  domain: '[depth, max_seq_len, batch_size] -> { S_0[i] : 0 <= i < batch_size }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_0[i] -> seq_len[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_0[i] -> seq_len[] }'
        reference: __pet_ref_0
        kill: 1
- line: 12
  domain: '[depth, max_seq_len, batch_size] -> { S_1[i] : 0 <= i < batch_size }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_1[i] -> seq_len[] }'
        reference: __pet_ref_1
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_1[i] -> seq_lens[(i)] }'
        reference: __pet_ref_2
        read: 1
        write: 0
- line: 15
  domain: '[depth, max_seq_len, batch_size] -> { [S_3[i, j, k] -> [seq_len]] : 0 <=
    i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_3[i, j, k] -> h_prev[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_3[i, j, k] -> h_prev[] }'
        reference: __pet_ref_4
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_3[i, j, k] -> seq_len[] }'
    reference: __pet_ref_3
    read: 1
    write: 0
- line: 17
  domain: '[depth, max_seq_len, batch_size] -> { [S_5[i, j = 0, k] -> [seq_len]] :
    0 <= i < batch_size and 0 <= k < depth and seq_len > 0 }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_5[i, j, k] -> h_prev[] }'
        reference: __pet_ref_6
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_5[i, j, k] -> init_state[]
          }'
        reference: __pet_ref_7
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_5[i, j, k] -> seq_len[] }'
    reference: __pet_ref_5
    read: 1
    write: 0
- line: 19
  domain: '[depth, max_seq_len, batch_size] -> { [S_6[i, j, k] -> [seq_len]] : 0 <=
    i < batch_size and j > 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_6[i, j, k] -> h_prev[] }'
        reference: __pet_ref_9
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_6[i, j, k] -> output[((i)
          : j <= 2147483648), ((-1 + j) : j <= 2147483648), ((k) : j <= 2147483648)]
          }'
        reference: __pet_ref_10
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_6[i, j, k] -> seq_len[] }'
    reference: __pet_ref_8
    read: 1
    write: 0
- line: 22
  domain: '[depth, max_seq_len, batch_size] -> { [S_7[i, j, k] -> [seq_len]] : 0 <=
    i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_7[i, j, k] -> x[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_7[i, j, k] -> x[] }'
        reference: __pet_ref_12
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_7[i, j, k] -> seq_len[] }'
    reference: __pet_ref_11
    read: 1
    write: 0
- line: 24
  domain: '[depth, max_seq_len, batch_size] -> { [S_9[i, j, k = 0] -> [seq_len]] :
    depth > 0 and 0 <= i < batch_size and j >= 0 and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_9[i, j, k] -> x[] }'
        reference: __pet_ref_14
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_9[i, j, k] -> input[(i), (j)]
          }'
        reference: __pet_ref_15
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_9[i, j, k] -> seq_len[] }'
    reference: __pet_ref_13
    read: 1
    write: 0
- line: 26
  domain: '[depth, max_seq_len, batch_size] -> { [S_10[i, j, k] -> [seq_len]] : 0
    <= i < batch_size and j >= 0 and 0 < k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_10[i, j, k] -> x[] }'
        reference: __pet_ref_17
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_10[i, j, k] -> output[(i),
          (j), (-1 + k)] }'
        reference: __pet_ref_18
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_10[i, j, k] -> seq_len[] }'
    reference: __pet_ref_16
    read: 1
    write: 0
- line: 29
  domain: '[depth, max_seq_len, batch_size] -> { [S_11[i, j, k] -> [seq_len]] : 0
    <= i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_11[i, j, k] -> h[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_11[i, j, k] -> h[] }'
        reference: __pet_ref_20
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_11[i, j, k] -> seq_len[] }'
    reference: __pet_ref_19
    read: 1
    write: 0
- line: 29
  domain: '[depth, max_seq_len, batch_size] -> { [S_12[i, j, k] -> [seq_len]] : 0
    <= i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_12[i, j, k] -> h[] }'
        reference: __pet_ref_22
        read: 0
        write: 1
      - type: call
        name: cell
        arguments:
        - type: access
          index: '[depth, max_seq_len, batch_size] -> { S_12[i, j, k] -> x[] }'
          reference: __pet_ref_23
          read: 1
          write: 0
        - type: access
          index: '[depth, max_seq_len, batch_size] -> { S_12[i, j, k] -> h_prev[]
            }'
          reference: __pet_ref_24
          read: 1
          write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_12[i, j, k] -> seq_len[] }'
    reference: __pet_ref_21
    read: 1
    write: 0
- line: 30
  domain: '[depth, max_seq_len, batch_size] -> { [S_14[i, j, k] -> [seq_len]] : 0
    <= i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: =
      arguments:
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_14[i, j, k] -> output[(i),
          (j), (k)] }'
        reference: __pet_ref_26
        read: 0
        write: 1
      - type: access
        index: '[depth, max_seq_len, batch_size] -> { S_14[i, j, k] -> h[] }'
        reference: __pet_ref_27
        read: 1
        write: 0
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_14[i, j, k] -> seq_len[] }'
    reference: __pet_ref_25
    read: 1
    write: 0
- line: 15
  domain: '[depth, max_seq_len, batch_size] -> { [S_4[i, j, k] -> [seq_len]] : 0 <=
    i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_4[i, j, k] -> h_prev[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_4[i, j, k] -> h_prev[] }'
        reference: __pet_ref_29
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_4[i, j, k] -> seq_len[] }'
    reference: __pet_ref_28
    read: 1
    write: 0
- line: 22
  domain: '[depth, max_seq_len, batch_size] -> { [S_8[i, j, k] -> [seq_len]] : 0 <=
    i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_8[i, j, k] -> x[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_8[i, j, k] -> x[] }'
        reference: __pet_ref_31
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_8[i, j, k] -> seq_len[] }'
    reference: __pet_ref_30
    read: 1
    write: 0
- line: 29
  domain: '[depth, max_seq_len, batch_size] -> { [S_13[i, j, k] -> [seq_len]] : 0
    <= i < batch_size and j >= 0 and 0 <= k < depth and seq_len > j }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_13[i, j, k] -> h[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_13[i, j, k] -> h[] }'
        reference: __pet_ref_33
        kill: 1
  arguments:
  - type: access
    index: '[depth, max_seq_len, batch_size] -> { S_13[i, j, k] -> seq_len[] }'
    reference: __pet_ref_32
    read: 1
    write: 0
- line: 12
  domain: '[depth, max_seq_len, batch_size] -> { S_2[i] : 0 <= i < batch_size }'
  body:
    type: expression
    expr:
      type: op
      operation: kill
      arguments:
      - type: access
        killed: '[depth, max_seq_len, batch_size] -> { S_2[i] -> seq_len[] }'
        index: '[depth, max_seq_len, batch_size] -> { S_2[i] -> seq_len[] }'
        reference: __pet_ref_34
        kill: 1
